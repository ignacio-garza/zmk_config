/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "42.h"

#define HYPER LC(LA(LGUI))
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // Thumb keys.


/ {
    behaviors {
        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            quick-tap-ms = <175>;

            require-prior-idle-ms = <150>;

            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            quick-tap-ms = <175>;

            require-prior-idle-ms = <150>;

            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "NEW_BEHAVIOR";
            #binding-cells = <0>;
            bindings = <&kp N>, <&kp SEMI>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo.equal {
            bindings = <&kp LS(N0)>;
            key-positions = <LM0 RM0>;
        };
    };

    macros {
        assign: assign {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp MINUS>;
            label = "ASSIGN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {

            // -----------------------------------------------------------------------------------------
            // |  &fun  |  Q   |  W     |  E     |  R     |  T   |   |  Y   |  U     |  I     |  O     |  P     | &def  |
            // | WORD  | ALT A| SHFT S | CTRL D | CMD F  |  G   |   |  H   | CMD J  | CTRL K | SHFT L | ALT Ñ |  ´     |
            // |       |  Z   |  X     |  C     |  V     |  B   |   |  N   |  M     |  ,     |  .     |  -     | <F4>  |
            //                     | &num   | &nav SPC | ESC |   | HYP TAB | &sym ENT | BKSP |

            display-name = "def";
            bindings = <
&mo 4      &kp Q              &kp W                &kp E           &kp R                  &kp T         &kp Y    &kp U                   &kp I           &kp O                 &kp P                  &to 0
&caps_word  &hrm_l LEFT_ALT A  &hrm_l LEFT_SHIFT S  &hrm_l LCTRL D  &hrm_l LEFT_COMMAND F  &kp G         &kp H    &hrm_r RIGHT_COMMAND J  &hrm_r RCTRL K  &hrm_r RIGHT_SHIFT L  &hrm_r RIGHT_ALT SEMI  &kp SQT
&kp CARET   &kp Z              &kp X                &kp C           &kp V                  &kp B         &kp N    &kp M                   &kp COMMA       &kp DOT               &kp FSLH               &kp F4
                                                    &mo 2           &lt 3 SPACE            &kp ESCAPE    &mt HYPER TAB  &lt 1 RET               &kp BACKSPACE
            >;
        };

        symbols {
            // -----------------------------------------------------------------------------------------
            // |  &fun  |  |   |  "     |  '     |  /     |  ·   |   |  ¡   |  !     |  [     |  ]     |  \     | &def  |
            // | WORD  | ALT A| SHFT S | CTRL D | CMD F  |  @   |   |  ¿   |  ?     |  (     |  )     | <F4>   |       |
            // |       |  `   |  ^     |  $     |  %     |  %   | & |  >   |  <     |  {     |  }     |  #     |       |
            //                     | &num   | &nav SPC | ESC |   | HYP TAB | &sym ENT | BKSP |

            display-name = "sym";
            bindings = <
&none  &kp LA(NUMBER_1)  &kp LS(NUMBER_2)  &kp MINUS         &kp LS(N7)  &kp LS(NUMBER_3)    &kp EQUAL      &kp LS(NUMBER_1)  &kp LA(LEFT_BRACKET)  &kp LA(RIGHT_BRACKET)  &kp LA(NON_US_BSLH)  &none
&none  &trans            &trans            &trans            &trans      &kp LA(NUMBER_2)    &kp LS(EQUAL)  &kp LS(MINUS)     &kp LS(N8)            &kp LS(N9)             &kp F4                &none
&none  &kp LEFT_BRACKET  &kp LS(LEFT_BRACKET)  &kp LS(NUMBER_4)  &kp LS(N5)  &kp LS(NUMBER_6)    &kp LS(GRAVE)  &kp GRAVE         &kp LA(APOS)          &kp LA(BACKSLASH)      &kp LA(NUMBER_3)                 &none
                                           &trans            &trans      &trans              &trans         &trans            &trans
            >;
        };

        numpad {
            // -----------------------------------------------------------------------------------------
            // |        |      |       |       |       |      |   |   /   |   7    |   8    |    9   |   -    |       |
            // |        |      |       |       |       |      |   |    *  |    4   |   5    |    6   |   +   |       |
            // |        |      |       |       |       |      |   |    0  |    1   |   2    |    3   |   -   |       |
            //                    |        |          |      |   |         |          |       |
            display-name = "num";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp KP_DIVIDE    &kp N7        &kp N8        &kp N9        &kp KP_MINUS  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp KP_MULTIPLY  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_PLUS   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp N0           &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_MINUS     &trans
                        &trans  &trans  &trans    &trans           &trans        &trans
            >;
        };

        nav {
// -----------------------------------------------------------------------------------------
// |        |      |       |       |       |      |   |          |           |       |            |       |       |
// |        |      |       |       |       |      |   |  LFT  | DWN | UP |  RHT   |      |       |
// |        |      |       |       |       |      |   |          |           |       |            |      |       |
//                    |        |          |      |   |           |           |       |

            display-name = "nav";
            bindings = <
&kp TAB  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6    &kp N7    &kp N8  &kp N9     &kp N0  &trans
&trans   &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans     &trans  &trans
                         &trans  &trans  &trans    &trans    &trans    &trans
            >;
        };

        functions {
            display-name = "fun";
            bindings = <
&trans  &trans      &trans             &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F10  &bt BT_CLR
&trans  &trans      &trans             &trans                &trans                &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11  &bt BT_SEL 0
&trans  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP       &kp C_PLAY_PAUSE      &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F12  &bt BT_SEL 1
                                       &trans                &trans                &trans    &trans  &trans  &trans
            >;
        };
    };
};
